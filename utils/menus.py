import re
import config
from utils.decorators import if_admin
from utils.rasp import Rasp
from utils.log import create_logger
from utils.db import DB
from utils.state import States
from datetime import datetime

from utils.utils import format_and_return_columns
logger = create_logger(__name__)

async def rasp(user_id: int, date: str = None, _get_new: bool = False):
    db = DB()
    group, sec_group = db.get_user_groups(user_id)
    date = date if date is not None else datetime.today().date().strftime("%d_%m_%Y")
    rasp = Rasp(date)
    text, btns = await rasp.create_rasp_msg(
        group=group,
        sec_group=sec_group,
        _get_new=_get_new
    )
    user = db.get_user_dataclass(user_id)
    if "rasp" in user.show_missed_hours_mode: text += f"\n‚è∞ –£ —Ç–µ–±—è —Å–µ–π—á–∞—Å <b>{user.missed_hours}</b> –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —á–∞—Å–æ–≤."
    return text, btns


from aiogram import types
from aiogram.fsm.context import FSMContext
async def start(user_id: int, state: FSMContext): 
    await state.clear()
    db = DB()
    if db.is_exists(user_id) is False:
        text = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π.\n\nüìù –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã:"
        await state.set_state(States.first_reg_group)
        return text, types.InlineKeyboardMarkup(inline_keyboard=[[]])
    else:
        user = db.get_user_dataclass(user_id)
        if "start" in (user.show_missed_hours_mode or ""):
            text = (
                f"üéì –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                f"‚è∞ –£ —Ç–µ–±—è —Å–µ–π—á–∞—Å <b>{user.missed_hours}</b> –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —á–∞—Å–æ–≤.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
            )
        else:
            text = (
                "üéì –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
            )
        btns = [
            [types.InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="menu:rasp")],
            [types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu:settings")]
        ]
        if str(user_id) == str(config.ADMIN_ID): btns += [[types.InlineKeyboardButton(text='ADMIN', callback_data="menu:admin")]]
        return text, types.InlineKeyboardMarkup(inline_keyboard=btns)


async def skip_sec_group(user_id: int, state: FSMContext):
    state_data = await state.get_data()
    group = state_data.get("group")
    await state.clear()
    db = DB()
    db.insert(
        user_id=user_id,
        tg_username=None,
        group_id=group,
        sec_group_id=None
    )
    text, btns = await start(user_id=user_id, state=state)
    return text, btns


async def settings(user_id: int, state: FSMContext):
    db = DB()
    group, sec_group = db.get_user_groups(user_id)
    await state.clear()
    text = f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n\nüìã –û—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞: <b>{group}</b>"
    if sec_group is not None:
        text += f"\nüìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞: <b>{sec_group}</b>"
    else:
        text += "\nüìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞: <i>–Ω–µ —É–∫–∞–∑–∞–Ω–∞</i>"
    
    btns = [
        [types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É", callback_data="menu:change_main_group")],
        [types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ø. –≥—Ä—É–ø–ø—É" if sec_group is not None else "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø. –≥—Ä—É–ø–ø—É", callback_data="menu:change_sec_group")],
        [types.InlineKeyboardButton(text="–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —á–∞—Å–æ–≤", callback_data="menu:missed_hours_mode")],
        [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:start")]
    ]
    return text, types.InlineKeyboardMarkup(inline_keyboard=btns)


async def change_main_group(user_id: int, state: FSMContext):
    db = DB()
    group, sec_group = db.get_user_groups(user_id)
    await state.clear()
    text = f"‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã\n\nüìã –¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞: <b>{group}</b>\n\nüìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:"
    btns = [
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="menu:settings")]
    ]
    await state.set_state(States.change_main_group)
    return text, types.InlineKeyboardMarkup(inline_keyboard=btns)

async def change_sec_group(user_id: int, state: FSMContext):
    db = DB()
    group, sec_group = db.get_user_groups(user_id)
    await state.clear()
    if sec_group is not None:
        text = f"‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã\n\nüìã –¢–µ–∫—É—â–∞—è –¥–æ–ø. –≥—Ä—É–ø–ø–∞: <b>{sec_group}</b>\n\nüìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:"
    else:
        text = "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã\n\nüìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã:\n\nüí° <i>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –≤–º–µ—Å—Ç–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π</i>"
    btns = [
        [types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–æ–ø. –≥—Ä—É–ø–ø—É", callback_data="menu:delete_sec_group")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="menu:settings")]
    ]
    await state.set_state(States.change_sec_group)
    return text, types.InlineKeyboardMarkup(inline_keyboard=btns)


async def delete_sec_group(user_id: int, state: FSMContext):
    db = DB()
    await state.clear()
    btns = [
        [types.InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="menu:settings")]
    ]
    if db.update(user_id=user_id, column="sec_group_id", new_data=None, table="users") is True:
        text = "‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
    else:
        text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã"
    return text, types.InlineKeyboardMarkup(inline_keyboard=btns)

@if_admin("user_id")
async def admin(user_id: int, state: FSMContext):
    text = "ADMIN"
    await state.clear()
    btns = [
        [types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞", callback_data="menu:ad")],
        [types.InlineKeyboardButton(text="–ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö", callback_data="menu:database")],
        [types.InlineKeyboardButton(text="–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="menu:send_rasp")],
        [types.InlineKeyboardButton(text="< –ù–∞–∑–∞–¥", callback_data="menu:start")]
    ]
    return text, types.InlineKeyboardMarkup(inline_keyboard=btns)

@if_admin("user_id")
async def database(user_id: int, state: FSMContext):
    db = DB()
    await state.clear()
    db_all_users = (
        '–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –ë–î:\n'
        f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(db.get_all("id", db.users_table))}\n\n'
        # f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–µ–¥: {len(db.get_all("tg_group_id", db.users_table))}\n'
        # f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –±–µ—Å–µ–¥–∞—Ö: '
        # f'{sum(int(db.get_all("count_members", db.users_table)))}\n'
    )
    border = "*________________________________________*"
    group_info_start = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º:'

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è group_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    all_group_ids = db.get_all("group_id", db.users_table)
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ –ø—É—Å—Ç—ã–µ –∏ –Ω–µ None –∑–Ω–∞—á–µ–Ω–∏—è
    all_group_ids = [g for g in all_group_ids if g not in (None, '', 'None')]

    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ
    from collections import Counter
    group_counter = Counter(all_group_ids)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    final_list_group = [
        f"{group} - {count}" for group, count in group_counter.most_common()
    ]

    group_text = ''
    for x in final_list_group:
        group_text += x + "\n"

    y = format_and_return_columns(group_text)
    final_text = f"{db_all_users}{border}\n{group_info_start}\n{y}"

    db_info_buttons = [
        [types.InlineKeyboardButton(text="–í—ã–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≥—Ä—É–ø–ø–µ", callback_data="menu:db_group")],
        [types.InlineKeyboardButton(text="–í—ã–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —á–µ–ª–æ–≤–µ–∫—É", callback_data="menu:db_user")],
        [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="menu:admin")]
    ]
    reply_markup = types.InlineKeyboardMarkup(inline_keyboard=db_info_buttons)
    return final_text, reply_markup

# @if_admin("user_id")
# async def db_group(user_id: int, state: FSMContext):
#     await state.clear()
#     await state.set_state(States.db_group_info)
#     return 'group_id?', types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="< –ù–∞–∑–∞–¥", callback_data="menu:database")]])


@if_admin("user_id")
async def db_user(user_id: int, state: FSMContext):
    await state.clear()
    await state.set_state(States.db_user_info)
    return 'user_id?', types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="< –ù–∞–∑–∞–¥", callback_data="menu:database")]])


@if_admin("user_id")
async def ad(user_id: int, state: FSMContext):
    await state.clear()
    await state.set_state(States.ad_msg)
    return "–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç", types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="menu:admin")]])


async def add_missing_hours(user_id: int, state: FSMContext):
    await state.clear()
    db = DB()
    user = db.get_user_dataclass(user_id)
    text = (
        f"‚è∞ –£ —Ç–µ–±—è —Å–µ–π—á–∞—Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ {user.missed_hours}—á.\n\n"
        "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å, —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ç—ã —É–∂–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª. –Ø –∏—Ö –ø—Ä–∏–±–∞–≤–ª—é –∫ —Ç–µ–∫—É—â–∏–º"
    )
    btns = [
        [types.InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", callback_data="menu:clear_missing_hours")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="delete_msg")]
    ]
    await state.set_state(States.add_missing_hours)
    return text, types.InlineKeyboardMarkup(inline_keyboard=btns)


async def clear_missing_hours(user_id: int, state: FSMContext):
    await state.clear()
    db = DB()
    user = db.get_user_dataclass(user_id)
    prev = user.missed_hours
    btns = [
        [types.InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="delete_msg")]
    ]
    try:
        db.cursor.execute("UPDATE users SET missed_hours = 0 WHERE user_id = ?", (user_id,))
        db.conn.commit()
        text = f"‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —á–∞—Å—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!\n–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ –æ—á–∏—Å—Ç–∫–∏: <b>{prev}</b>"
    except Exception as e:
        text = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —á–∞—Å–æ–≤: {e}"
    finally:
        return text, types.InlineKeyboardMarkup(inline_keyboard=btns)


async def missed_hours_mode(user_id: int, mode: str = None):
    db = DB()
    if mode is not None and isinstance(mode, FSMContext) is False:
        db.update_hours_mode(user_id, mode)
    user = db.get_user_dataclass(user_id)
    show_missed_hours_mode = user.show_missed_hours_mode
    btns = [
        [types.InlineKeyboardButton(
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" + (" ‚ùå" if show_missed_hours_mode is None or 'start' not in show_missed_hours_mode else " ‚úÖÔ∏è"),
            callback_data="menu:missed_hours_mode?('start')"
        )],
        [types.InlineKeyboardButton(
            text="–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è" + (" ‚ùå" if show_missed_hours_mode is None or 'rasp' not in show_missed_hours_mode else " ‚úÖÔ∏è"),
            callback_data="menu:missed_hours_mode?('rasp')"
        )],
        [types.InlineKeyboardButton(
            text="–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" + (" ‚ùå" if show_missed_hours_mode is None or 'newRasp' not in show_missed_hours_mode else " ‚úÖÔ∏è"),
            callback_data="menu:missed_hours_mode?('newRasp')"
        )],
        [types.InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data="menu:settings"
        )]
    ]
    return "–ü–æ–∫–∞–∑ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —á–∞—Å–æ–≤", types.InlineKeyboardMarkup(inline_keyboard=btns)


async def group_settings(user_id: int, state: FSMContext):
    btns = [
        [types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="menu:change_GROUP_group")], # –ø–æ –¥—Ä—É–≥–æ–º—É –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª xD
        [types.InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="delete_msg")]
    ]
    return "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", types.InlineKeyboardMarkup(inline_keyboard=btns)


async def change_GROUP_group(id: int, state: FSMContext):
    db = DB()
    try:
        group = db.cursor.execute('SELECT "group" FROM groups WHERE id = ?', (id,)).fetchone()[0]
    except Exception:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É –≥—Ä—É–ø–ø—É –≤ –±–∞–∑–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞", types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="delete_msg")]])
    text = f"""
‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã

üìã –¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞: {group}

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:
        """
    await state.set_state(States.GROUP_change_group)
    await state.update_data(id=id)
    return text, types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="delete_msg")]]) 