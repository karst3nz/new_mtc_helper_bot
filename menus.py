import config
from utils.decorators import if_admin
from rasp import Rasp
from log import create_logger
from db import DB
from state import States
from datetime import datetime

from utils.utils import format_and_return_columns
logger = create_logger(__name__, level="DEBUG")

async def rasp(user_id: int, date: str = None, _get_new: bool = False):
    group, sec_group = DB().get_user_groups(user_id)
    date = date if date is not None else datetime.today().date().strftime("%d_%m_%Y")
    rasp = Rasp(date)
    return await rasp.create_rasp_msg(
        group=group,
        sec_group=sec_group,
        _get_new=_get_new
    )


from aiogram import types
from aiogram.fsm.context import FSMContext
async def start(user_id: int, state: FSMContext): 
    if DB().is_exists(user_id) is False:
        text = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π.\n\nüìù –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã:"
        await state.set_state(States.first_reg_group)
        return text, types.InlineKeyboardMarkup(inline_keyboard=[[]])
    else:
        text = "üéì –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
        btns = [
            [types.InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="menu:rasp")],
            [types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu:settings")]
        ]
        if str(user_id) == str(config.ADMIN_ID): btns += [[types.InlineKeyboardButton(text='ADMIN', callback_data="menu:admin")]]
        return text, types.InlineKeyboardMarkup(inline_keyboard=btns)


async def skip_sec_group(user_id: int, state: FSMContext):
    state_data = await state.get_data()
    group = state_data.get("group", "0000")
    await state.clear()
    db = DB()
    db.insert(
        user_id=user_id,
        tg_username=None,
        group_id=group,
        sec_group_id=None
    )
    text, btns = await start(user_id=user_id, state=state)
    return text, btns


async def settings(user_id: int, state: FSMContext):
    db = DB()
    group, sec_group = db.get_user_groups(user_id)
    text = f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n\nüìã –û—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞: <b>{group}</b>"
    if sec_group is not None:
        text += f"\nüìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞: <b>{sec_group}</b>"
    else:
        text += "\nüìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞: <i>–Ω–µ —É–∫–∞–∑–∞–Ω–∞</i>"
    
    btns = [
        [types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É", callback_data="menu:change_main_group")],
        [types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ø. –≥—Ä—É–ø–ø—É" if sec_group is not None else "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø. –≥—Ä—É–ø–ø—É", callback_data="menu:change_sec_group")],
        [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:start")]
    ]
    return text, types.InlineKeyboardMarkup(inline_keyboard=btns)


async def change_main_group(user_id: int, state: FSMContext):
    db = DB()
    group, sec_group = db.get_user_groups(user_id)
    text = f"‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã\n\nüìã –¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞: <b>{group}</b>\n\nüìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:"
    btns = [
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="menu:settings")]
    ]
    await state.set_state(States.change_main_group)
    return text, types.InlineKeyboardMarkup(inline_keyboard=btns)

async def change_sec_group(user_id: int, state: FSMContext):
    db = DB()
    group, sec_group = db.get_user_groups(user_id)
    if sec_group is not None:
        text = f"‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã\n\nüìã –¢–µ–∫—É—â–∞—è –¥–æ–ø. –≥—Ä—É–ø–ø–∞: <b>{sec_group}</b>\n\nüìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:"
    else:
        text = "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã\n\nüìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã:\n\nüí° <i>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –≤–º–µ—Å—Ç–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π</i>"
    btns = [
        [types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–æ–ø. –≥—Ä—É–ø–ø—É", callback_data="menu:delete_sec_group")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="menu:settings")]
    ]
    await state.set_state(States.change_sec_group)
    return text, types.InlineKeyboardMarkup(inline_keyboard=btns)


async def delete_sec_group(user_id: int, state: FSMContext):
    db = DB()
    btns = [
        [types.InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="menu:settings")]
    ]
    if db.update(user_id=user_id, column="sec_group_id", new_data=None, table="users") is True:
        text = "‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
    else:
        text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã"
    return text, types.InlineKeyboardMarkup(inline_keyboard=btns)

@if_admin("user_id")
async def admin(user_id: int, state: FSMContext):
    text = "ADMIN"
    btns = [
        [types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞", callback_data="menu:ad")],
        [types.InlineKeyboardButton(text="–ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö", callback_data="menu:database")],
        [types.InlineKeyboardButton(text="–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="menu:send_rasp")],
        [types.InlineKeyboardButton(text="< –ù–∞–∑–∞–¥", callback_data="menu:start")]
    ]
    return text, types.InlineKeyboardMarkup(inline_keyboard=btns)

@if_admin("user_id")
async def database(user_id: int, state: FSMContext):
    db = DB()
    await state.clear()
    db_all_users = ('–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –ë–î:\n'
                    f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(db.get_all("id", db.users_table))}\n\n'
                    # f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–µ–¥: {len(db.get_all("tg_group_id", db.users_table))}\n'
                    # f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –±–µ—Å–µ–¥–∞—Ö: '
                    # f'{sum(int(db.get_all("count_members", db.users_table)))}\n'
                    )
    border = "*________________________________________*"
    group_info_start = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º:'
    group = db.get_all("group_id", db.users_table)
    final_list_group = []
    for item in config.groups:
        count_of_ones = len([x for x in group if str(x) == item])
        if count_of_ones == 0:
            continue
        else:
            final_list_group.append(f"{item} - {count_of_ones}")
    final_list_group.sort(key=lambda x: int(x.split(' - ')[1]), reverse=True)
    group_text = ''
    for x in final_list_group:
        group_text += x + "\n"
    y = format_and_return_columns(group_text)
    final_text = f"{db_all_users}" + f"{border}\n" + f"{group_info_start}\n" + f"{y}"
    db_info_buttons = [
        [types.InlineKeyboardButton(text="–í—ã–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≥—Ä—É–ø–ø–µ", callback_data="menu:db_group")],
        [types.InlineKeyboardButton(text="–í—ã–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —á–µ–ª–æ–≤–µ–∫—É", callback_data="menu:db_user")],
        [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="menu:admin")]
    ]
    reply_markup = types.InlineKeyboardMarkup(inline_keyboard=db_info_buttons)
    return final_text, reply_markup

@if_admin("user_id")
async def db_group(user_id: int, state: FSMContext):
    await state.set_state(States.db_group_info)
    return 'group_id?', types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="< –ù–∞–∑–∞–¥", callback_data="menu:database")]])


@if_admin("user_id")
async def db_user(user_id: int, state: FSMContext):
    await state.set_state(States.db_user_info)
    return 'user_id?', types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="< –ù–∞–∑–∞–¥", callback_data="menu:database")]])
