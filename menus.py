from rasp import Rasp
from log import create_logger
from db import DB
from state import States
from datetime import datetime
logger = create_logger(__name__, level="DEBUG")

async def rasp(user_id: int, date: str = None, _get_new: bool = False):
    group, sec_group = DB().get_user_groups(user_id)
    date = date if date is not None else datetime.today().date().strftime("%d_%m_%Y")
    rasp = Rasp(date)
    return await rasp.create_rasp_msg(
        group=group,
        sec_group=sec_group,
        _get_new=_get_new
    )


from aiogram import types
from aiogram.fsm.context import FSMContext
async def start(user_id: int, state: FSMContext): 
    if DB().is_exists(user_id) is False:
        text = "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É:"
        await state.set_state(States.first_reg_group)
        return text, types.InlineKeyboardMarkup(inline_keyboard=[[]])
    else:
        text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        btns = [
            [types.InlineKeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="menu:rasp")],
            [types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu:settings")]
        ]
        return text, types.InlineKeyboardMarkup(inline_keyboard=btns)


async def skip_sec_group(user_id: int, state: FSMContext):
    state_data = await state.get_data()
    group = state_data.get("group", "0000")
    await state.clear()
    db = DB()
    db.insert(
        user_id=user_id,
        tg_username=None,
        group_id=group,
        sec_group_id=None
    )
    text, btns = await start(user_id=user_id, state=state)
    return text, btns


async def settings(user_id: int, state: FSMContext):
    db = DB()
    group, sec_group = db.get_user_groups(user_id)
    btns = [
        [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É", callback_data="menu:change_main_group")],
        [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ø. –≥—Ä—É–ø–ø—É" if sec_group is not None else "–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø. –≥—Ä—É–ø–ø—É", callback_data="menu:change_sec_group")],
        [types.InlineKeyboardButton(text="< –ù–∞–∑–∞–¥", callback_data="menu:start")]
    ]
    text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    return text, types.InlineKeyboardMarkup(inline_keyboard=btns)


async def change_main_group(user_id: int, state: FSMContext):
    db = DB()
    group, sec_group = db.get_user_groups(user_id)
    text = f"–¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã: {group}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:"
    btns = [
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="menu:settings")]
    ]
    await state.set_state(States.change_main_group)
    return text, types.InlineKeyboardMarkup(inline_keyboard=btns)

async def change_sec_group(user_id: int, state: FSMContext):
    db = DB()
    group, sec_group = db.get_user_groups(user_id)
    if sec_group is not None:
        text = f"–¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã: {sec_group}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:"
    else:
        text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã:"
    btns = [
        [types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–æ–ø. –≥—Ä—É–ø–ø—É", callback_data="menu:delete_sec_group")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="menu:settings")]
    ]
    await state.set_state(States.change_sec_group)
    return text, types.InlineKeyboardMarkup(inline_keyboard=btns)


async def delete_sec_group(user_id: int, state: FSMContext):
    db = DB()
    btns = [
        [types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—Å—è", callback_data="menu:settings")]
    ]
    if db.update(user_id=user_id, column="sec_group_id", new_data=None, table="users") is True:
        text = "–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É!"
    else:
        text = "–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!"
    return text, types.InlineKeyboardMarkup(inline_keyboard=btns)
