from config import *

from utils.db import DB
from utils.log import create_logger
from utils.menus import start
from utils.decorators import check_group, if_admin
logger = create_logger(__name__)


@dp.message(States.first_reg_group)
@check_group()
async def reg_group(msg: types.Message, state: FSMContext):
    btns = [
        [types.InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="menu:skip_sec_group")]
    ]
    await msg.answer("üéØ –û—Ç–ª–∏—á–Ω–æ! –ì—Ä—É–ø–ø–∞ <b>{}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n\nüí° –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É?\n\nüìã –í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–µ–∏—Ö –≥—Ä—É–ø–ø.\n\n‚è≠Ô∏è –≠—Ç–æ—Ç —à–∞–≥ –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.".format(msg.text),
                     reply_markup=types.InlineKeyboardMarkup(inline_keyboard=btns)
    )
    await state.set_state(States.sec_reg_group)
    await state.update_data(group=msg.text)



@dp.message(States.sec_reg_group)
@check_group()
async def sec_reg_group(msg: types.Message, state: FSMContext):
    state_data = await state.get_data()
    group = state_data.get("group", "0000")
    await state.clear()
    db = DB()
    db.insert(
        user_id=msg.from_user.id,
        tg_username=msg.from_user.username,
        group_id=group,
        sec_group_id=msg.text
    )
    text, btns = await start(user_id=msg.from_user.id, state=state)
    await msg.answer(
        text=text,
        reply_markup=btns
    )
    

@dp.message(States.change_main_group)
@check_group()
async def change_main_group(msg: types.Message, state: FSMContext):
    db = DB()
    await state.clear()
    btns = [
        [types.InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="menu:settings")]
    ]
    if db.update(user_id=msg.from_user.id, column="group_id", new_data=msg.text, table='users') is True:
        await msg.answer("‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!\n\nüìã –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä: <b>{}</b>".format(msg.text), reply_markup=types.InlineKeyboardMarkup(inline_keyboard=btns))
    else:
        await msg.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.\n\nüîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=btns))


@dp.message(States.change_sec_group)
@check_group()
async def change_sec_group(msg: types.Message, state: FSMContext):
    db = DB()
    await state.clear()
    btns = [
        [types.InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="menu:settings")]
    ]
    if db.update(user_id=msg.from_user.id, column="sec_group_id", new_data=msg.text, table='users') is True:
        await msg.answer("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!\n\nüìã –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä: <b>{}</b>".format(msg.text), reply_markup=types.InlineKeyboardMarkup(inline_keyboard=btns))
    else:
        await msg.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.\n\nüîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=btns))


@dp.message(States.db_user_info)
@if_admin('msg')
async def db_user_info(msg: types.Message, state: FSMContext):
    db = DB()
    text = db.return_user_data(str(msg.text))
    btns = [
        [types.InlineKeyboardButton(text='< –ù–∞–∑–∞–¥', callback_data="menu:database")]
    ]
    await msg.answer(text=text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=btns))



@dp.message(States.ad_msg)
@if_admin("msg")
async def ad_msg(msg: types.Message, state: FSMContext):
    await state.set_state(States.ad_confirm)
    await state.update_data(msg2forward=msg)
    msg2delete = []
    msg2delete.append(msg.message_id)
    msg2delete.append((await msg.forward(chat_id=msg.from_user.id)).message_id)
    btns = [
        [types.InlineKeyboardButton(text="–î–∞", callback_data="ad_confirm"), types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="ad_deny")]
    ]
    msg2delete.append((await msg.answer(text="–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å?", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=btns))).message_id)
    await state.update_data(msg2delete=msg2delete)



@dp.message(States.add_missing_hours)
async def add_missing_hours(msg: types.Message, state: FSMContext):
    await state.clear()
    db = DB()
    db.cursor.execute(f"UPDATE users SET missed_hours = missed_hours + ? WHERE user_id = ?", (msg.text, msg.from_user.id)).connection.commit()
    user = db.get_user_dataclass(msg.from_user.id)
    btns = [
        [types.InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="delete_msg")]
    ]
    text = f"‚úÖ –ì–æ—Ç–æ–≤–æ!\n\n‚è∞ –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –ø—Ä–æ–ø—É—â–µ–Ω–æ {user.missed_hours}—á."
    await msg.answer(text=text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=btns))



@dp.message(States.GROUP_reg_group)
@check_group()
async def GROUP_reg_group(msg: types.Message, state: FSMContext):
    state_data = await state.get_data()
    id = state_data["id"]
    user_id = state_data["user_id"]
    db = DB()
    db.insert_group(id, user_id, msg.text)
    btns = [
        [types.InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="delete_msg")]
    ]
    await msg.reply(f"‚úÖ –ì—Ä—É–ø–ø–∞ <b>{msg.text}</b> —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=btns))
    await state.clear()


@dp.message(States.GROUP_change_group)
@check_group()
async def GROUP_change_group(msg: types.Message, state: FSMContext):
    state_data = await state.get_data()
    id = state_data["id"]
    db = DB()
    db.cursor.execute(f'UPDATE groups SET "group" = ? WHERE id = ?', (msg.text, id)).connection.commit()
    btns = [
        [types.InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="delete_msg")]
    ]
    await msg.reply(f"‚úÖ –ì—Ä—É–ø–ø–∞ <b>{msg.text}</b> —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=btns))
    await state.clear()